<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
                         http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-4.3.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">

    <mvc:default-servlet-handler/>

    <!--启用spring的一些annotation -->
    <context:annotation-config/>

    <!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
    <context:component-scan base-package="com.ev.controller">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <mvc:interceptors>
        <!-- 配置访问拦截器 -->
        <mvc:interceptor>
            <mvc:mapping path="/u/**"/>
            <bean id="loginInterceptor" class="com.ev.utils.LoginInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>

    <!--HandlerMapping 无需配置，SpringMVC可以默认启动-->

    <!-- springmvc提供的简单异常处理器 -->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <!-- 定义默认的异常处理页面 -->
        <property name="defaultErrorView" value="default_error"/>
        <!-- 定义异常处理页面用来获取异常信息的变量名，也可不定义，默认名为exception -->
        <property name="exceptionAttribute" value="exception"/>
        <!-- 定义需要特殊处理的异常，这是重要点 -->
        <property name="exceptionMappings">
            <props>
                <prop key="com.ev.exception.CustomException">/WEB-INF/views/errors/custom_error.jsp</prop>
                <prop key="com.ev.exception.StudentDuplicateException">/WEB-INF/errors/duplicate_error.jsp</prop>
            </props>
            <!-- 还可以定义其他的自定义异常 -->
        </property>
    </bean>

    <!--静态资源映射-->
    <!--本项目把静态资源放在了WEB-INF的子目录下，资源映射如下-->
    <!--<mvc:resources mapping="/static/**" location="/WEB-INF/static/"/>-->
    <!--<mvc:resources mapping="/static/less/**" location="/WEB-INF/static/less/"/>-->
    <!--<mvc:resources mapping="/static/less.js-2.5.3/**" location="/WEB-INF/static/less.js-2.5.3/"/>-->
    <!--<mvc:resources mapping="/static/photo/**" location="/WEB-INF/static/photo/"/>-->

    <!-- 配置注解驱动 可以将request参数与绑定到controller参数上 -->
    <task:annotation-driven/>
    <mvc:annotation-driven/>
    <context:annotation-config/>

    <bean id="viewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView"/>
    </bean>
    <bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
        <property name="definitions">
            <list>
                <value>/WEB-INF/views/tiles/tiles.xml</value>
            </list>
        </property>
    </bean>

    <!--对模型视图名称的解析，即在模型视图名称添加前后缀(如果最后一个还是表示文件夹,则最后的斜杠不要漏了) 使用JSP-->
    <!--默认的视图解析器在上边的解析错误时使用 (默认使用html)- -->
    <bean id="defaultViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <!--设置JSP文件的目录位置-->
        <property name="prefix" value="/WEB-INF/views/pages/"/>
        <property name="suffix" value=".jsp"/>
    </bean>



</beans>