<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 自动扫描SpringMVC包 ,将带有注解的类 纳入spring容器管理 -->
    <!--扫描service-->
    <context:component-scan base-package="com.ev.service"/>

    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!-- 引入jdbc配置文件 -->
    <!--<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">-->
    <!--<property name="locations">-->
    <!--<list>-->
    <!--<value>classpath*:jdbc.properties</value>-->
    <!--</list>-->
    <!--</property>-->
    <!--</bean>-->

    <!-- dataSource 配置 -->
    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 连接初始值，连接池启动时创建的连接数量的初始值  默认值是0 -->
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请  默认值是0 -->
        <property name="minIdle" value="${jdbc.minIdle}"/>
        <!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 ，0时无限制  默认值是8 -->
        <property name="maxIdle" value="${jdbc.maxIdle}"/>
        <!-- 连接池的最大值，同一时间可以从池分配的最多连接数量，0时无限制   默认值是8 -->
        <property name="maxTotal" value="${jdbc.maxTotal}"/>
    </bean>

    <!-- mybatis文件配置，扫描所有mapper.xml文件 -->
    <!-- 配置mybatisSqlSessionFactoryBean -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis.xml"/>
        <property name="mapperLocations" value="classpath*:com/ev/dao/*Mapper.xml"/>
    </bean>

    <!-- 配置SqlSessionTemplate -->
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
    </bean>

    <!-- 配置mybatis mapper接口，扫描所有dao -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.ev.dao"/>
        <property name="sqlSessionTemplateBeanName" value="sqlSessionTemplate"/>
    </bean>

    <!--两种方式开启@AspectJ的支持-->
    <!--方法一-->
    <!--<aop:aspectj-autoproxy/>-->


    <!--<context:component-scan base-package="com.ev.service">-->
        <!--<context:include-filter type="annotation" expression="org.aspectj.lang.annotation.Aspect"/>-->
    <!--</context:component-scan>-->

    <!--方法二-->
    <!--<bean class="org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator"/>-->

    <!-- 事务管理 通知 -->
    <!--<tx:advice id="txAdvice" transaction-manager="transactionManager">-->
    <!--<tx:attributes>-->
    <!--&lt;!&ndash; 对insert,update,delete 开头的方法进行事务管理,只要有异常就回滚 &ndash;&gt;-->
    <!--<tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>-->
    <!--<tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>-->
    <!--<tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>-->
    <!--&lt;!&ndash; select,count开头的方法,开启只读,提高数据库访问性能 &ndash;&gt;-->
    <!--<tx:method name="select*" read-only="true"/>-->
    <!--<tx:method name="count*" read-only="true"/>-->
    <!--&lt;!&ndash; 对其他方法 使用默认的事务管理 &ndash;&gt;-->
    <!--<tx:method name="*"/>-->
    <!--</tx:attributes>-->
    <!--</tx:advice>-->

    <!-- 对dataSource 数据源进行事务管理 -->
    <!--<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"-->
    <!--p:dataSource-ref="dataSource"/>-->

    <!-- 使用annotation注解方式配置事务,启用对事务注解的支持 -->
    <!--<tx:annotation-driven transaction-manager="transactionManager"/>-->

</beans>